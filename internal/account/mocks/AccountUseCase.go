// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "waizly/models"

	mock "github.com/stretchr/testify/mock"

	response "waizly/helpers/response"
)

// AccountUseCase is an autogenerated mock type for the AccountUseCase type
type AccountUseCase struct {
	mock.Mock
}

// DeleteAccount provides a mock function with given fields: ctx, id
func (_m *AccountUseCase) DeleteAccount(ctx context.Context, id int64) response.Response {
	ret := _m.Called(ctx, id)

	var r0 response.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64) response.Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.Response)
		}
	}

	return r0
}

// DetailAccount provides a mock function with given fields: ctx, id
func (_m *AccountUseCase) DetailAccount(ctx context.Context, id int64) response.Response {
	ret := _m.Called(ctx, id)

	var r0 response.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64) response.Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.Response)
		}
	}

	return r0
}

// Login provides a mock function with given fields: ctx, params
func (_m *AccountUseCase) Login(ctx context.Context, params models.LoginRequest) (response.Response, models.Token) {
	ret := _m.Called(ctx, params)

	var r0 response.Response
	if rf, ok := ret.Get(0).(func(context.Context, models.LoginRequest) response.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.Response)
		}
	}

	var r1 models.Token
	if rf, ok := ret.Get(1).(func(context.Context, models.LoginRequest) models.Token); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Get(1).(models.Token)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, params
func (_m *AccountUseCase) Register(ctx context.Context, params models.RegisterRequest) response.Response {
	ret := _m.Called(ctx, params)

	var r0 response.Response
	if rf, ok := ret.Get(0).(func(context.Context, models.RegisterRequest) response.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.Response)
		}
	}

	return r0
}

// UpdateAccount provides a mock function with given fields: ctx, id, params
func (_m *AccountUseCase) UpdateAccount(ctx context.Context, id int64, params models.Account) response.Response {
	ret := _m.Called(ctx, id, params)

	var r0 response.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, models.Account) response.Response); ok {
		r0 = rf(ctx, id, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.Response)
		}
	}

	return r0
}

type mockConstructorTestingTNewAccountUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountUseCase creates a new instance of AccountUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountUseCase(t mockConstructorTestingTNewAccountUseCase) *AccountUseCase {
	mock := &AccountUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
